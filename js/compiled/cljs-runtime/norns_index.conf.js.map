{"version":3,"sources":["norns_index/conf.cljc"],"mappings":";AAMA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AASL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAML,AAAA,AAAMC;AAAN,AACE,AAACC,AACA,AAACC,AACA,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAME;AAAN,AAAAD,AAAAD,AAAA,AAAA,AAAQG;AAAR,AACE,AAAMC,AAAO,AAAA,AAASD;AAChBE,AAAY,AAAA,AAAkBF;AAC9BG,AAAcJ;AACdK,AAAO,AAACC,AAAKJ,AAAOE;AACpBC,AAAO,AAAIF,AACF,AAACG,AAAKD,AAAOF,AACbE;AANf,AAOEA;AACJb;;AAMJ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKe;AAmHL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AASL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC","names":["norns-index.conf/io-features","norns-index.conf/ordered-filterable-io-features","norns-index.conf/flattended-io-features","cljs.core/set","cljs.core.mapcat","p__42282","vec__42283","cljs.core.nth","f","f-props","std-vs","catch-all-v","unspecified-v","all-vs","cljs.core.conj","norns-index.conf/script-list","norns-index.conf/script-categories","norns-index.conf/script-categories-order"],"sourcesContent":["(ns norns-index.conf)\n\n\n\f\n;; CONF: SCRIPT I/O FEATURES\n\n(def io-features\n  {:grid {:values #{:grid_64 :grid_128}\n          :catch-all-value :grid_any\n          :is-required true}\n   :arc {:values #{:arc}}\n   :crow {:values #{:crow}}\n   :midi {:values #{:midi_in :midi_out}}\n   })\n\n(def ordered-filterable-io-features\n  [:grid\n   :arc\n   :crow\n   :midi])\n\n(defn flattended-io-features []\n  (set\n   (mapcat\n    (fn [[f f-props]]\n      (let [std-vs (:values f-props)\n            catch-all-v (:catch-all-value f-props)\n            unspecified-v f             ; NB: current simplified implem\n            all-vs (conj std-vs unspecified-v)\n            all-vs (if catch-all-v\n                     (conj all-vs catch-all-v)\n                     all-vs)]\n        all-vs))\n    io-features)))\n\n\n\f\n;; CONF: SCRIPT INVENTORY\n\n(def script-list\n  {\"awake\" {:types [:sequencer]\n            :features #{:audio_out :midi_out :grid_128}\n            :required-features #{:grid}}\n   \"barcode\" {:types [:looper]\n              :features #{:audio_in :audio_out}}\n   \"changes\" {:types [:cc]\n              :features #{:midi_out}}\n   \"cranes\" {:types [:looper]\n             :features #{:audio_in :audio_out :grid_128}}\n   ;; \"downtown\" {:types [:looper]}\n   \"drift\" {:types [:sequencer]\n            :features #{:audio_out :midi_out}}\n   \"drum_room\" {:types [:sample-player]\n                :features #{:audio_out :midi_in}\n                :required-features #{:midi_in}}\n   \"euclydigons\" {:types [:sequencer]\n                  :features #{:audio_out :midi_out}}\n   \"flora\" {:types [:sequencer]\n            :features #{:audio_out :midi_out}}\n   \"fretwork\" {:types [:sequencer]\n               :features #{:audio_out :midi_out :grid_128}}\n   \"greyhole\" {:types [:audio-effect]\n               :features #{:audio_in :audio_out}}\n   \"gridstep\" {:types [:sequencer]\n               :features #{:audio_out :midi_out :grid_64 :grid_128}\n               :required-features #{:grid}}\n   \"hachi\" {:types [:synth]\n            :features #{:audio_out}}\n   \"lissadron\" {:types [:synth]\n                :features #{:audio_out :midi_in}\n                :encouraged-features #{:midi_in}}\n   \"loom\" {:types [:sequencer]\n           :features #{:grid_any :audio_out :midi_out}\n           :required-features #{:grid}}\n   \"lost_futures\" {:types [:synth]\n                   :features #{:midi_in :audio_out}\n                   :required-features #{:midi_in}}\n   \"mlr\" {:types [:looper]\n          :features #{:audio_in :audio_out :grid_128}\n          :required-features #{:grid}}\n   \"molly_the_polly\" {:types [:synth]\n                      :features #{:midi_in :audio_out :grid_128}}\n   \"mouse\" {:types [:sequencer]\n            :features #{:kbd :mouse :audio_out :midi_out}}\n   \"oooooo\" {:types [:looper]\n              :features #{:audio_in :audio_out}}\n   \"orca\" {:types [:tracker]\n           :features #{:audio_in :audio_out :kbd :arc :crow :midi_out :grid_any}\n           :required-features #{:kbd}}\n   \"ortf\" {:types [:sample-player]\n           :features #{:audio_out}}\n   \"passerby\" {:types [:synth]\n               :features #{:audio_out :midi_in :grid_128}}\n   \"pedalboard\" {:types [:audio-effect]\n                 :features #{:audio_in :audio_out}}\n   \"reels\" {:types [:looper]\n            :features #{:audio_in :audio_out}}\n   \"rpmate\" {:types [:util]\n             :features #{:audio_in :audio_out}}\n   \"rudiments\" {:types [:synth]\n                :features #{:grid_128 :audio_out}\n                :encouraged-features #{:grid}}\n   \"sam\" {:types [:sampler]\n          :features #{:audio_in :audio_out}}\n   \"sines\" {:types [:synth]\n            :features #{:midi_in :audio_out}}\n   \"step\" {:types [:sequencer]\n           :features #{:grid_128 :audio_out}\n           :required-features #{:grid}}\n   \"takt\" {:types [:sequencer]\n           :features #{:grid_128 :audio_out}\n           :required-features #{:grid}}\n   \"timber_player\" {:types [:sample-player]\n                    :features #{:grid_128 :midi_in :audio_out}}\n   \"timeparty\" {:types [:audio-effect]\n                :features #{:audio_in :audio_out :grid}\n                :required-features #{:grid}}\n   \"uvf\" {:types [:sample-player]\n          :features #{:audio_out}}\n   \"wrms\" {:types [:looper]\n           :features #{:audio_in :audio_out}}\n   \"yggrasil\" {:types [:tracker]\n               :features #{:kbd :midi_out :audio_out}\n               :required-features #{:kbd :midi_out :audio_out}}\n   }\n  )\n\n;; (def script-categories\n;;   {:synth \"Synths & Drones\"\n;;    :granular \"Granular Processing\"\n;;    :sample-player \"Sample Players\"\n;;    :sampler \"Basic Samplers\"\n;;    :sequencer \"Sequencers\"\n;;    :tracker \"Trackers\"\n;;    :cc \"Control Modulation Sources\"\n;;    :audio-effect \"Audio Effets\"\n;;    :looper \"Loopers, Live Samplers & Crazy Delays\"\n;;    :midi-effect \"Midi Effets\"\n;;    :util \"Utilities\"\n;;    })\n\n;; (def script-categories-order\n;;   [:synth\n;;    :granular\n;;    :sample-player\n;;    :sampler\n;;    :sequencer\n;;    :tracker\n;;    :cc\n;;    :audio-effect\n;;    :looper\n;;    :midi-effect\n;;    :util])\n\n(def script-categories\n  {\"audio fx\" \"audio fx\"\n   \"granulators\" \"granulators\"\n   \"loopers + live samplers\" \"loopers + live samplers\"\n   \"sequencers\" \"sequencers\"\n   \"synths\" \"synths\"\n   \"art\" \"art\"\n   })\n\n(def script-categories-order\n  [\"audio fx\"\n   \"granulators\"\n   \"loopers + live samplers\"\n   \"sequencers\"\n   \"synths\"\n   \"art\"])\n"]}