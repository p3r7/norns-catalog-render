{"version":3,"sources":["norns_index/views.cljs"],"mappings":"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","names":["norns-index.views/main-view","cljs.core.doall","cljs.core.map","norns-index.views/script-category-section","norns-index.conf/script-categories-order","norns-index.views/filter-panel","e","cljs.core.swap_BANG_","norns-index.state/state","cljs.core/assoc-in","norns-index.views/filter-section-io-feature","norns-index.conf/ordered-filterable-io-features","feature","feature-def","cljs.core.get","norns-index.conf/io-features","feature-std-vals","feature-catch-all-val","feature-all-default-vals","cljs.core.conj","is-requirable","on-change-visibility-fn","cljs.core.keyword","on-change-value-fn","cljs.core/update-in","cljs.core/conj","cljs.core/disj","cljs.core/name","cljs.core._EQ_","cljs.core/deref","cljs.core.get_in","cljs.core/count","feature-v","label","clojure.string/replace-first","script-category","temp__5735__auto__","matched-scripts","cljs.core.filter","p__44212","vec__44213","cljs.core.nth","script-name","script-props","and__4115__auto__","norns-index.utils.core/member?","norns-index.state/show-script?","cljs.core/keys","cljs.core.sort","cljs.core/seq","norns-index.conf/script-categories","p1__44210#","norns-index.views/script-panel","url","description","features","required-features","feature-icons","norns-index.views/norns-script-features->icons","js/window","norns-index.views/screenshot","clojure.string/upper-case","p1__44217#","norns-index.views/feature","author","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","p__44228","vec__44229","seq44226","G__44227","cljs.core/first","cljs.core/next","self__4723__auto__","feature-name","norns-index.views/simple-feature->icon","p__44240","vec__44241","seq44236","G__44237","is-required","norns-index.views/simple-feature->icon-maybe","search","norns-index.views/midi-feature->icon-maybe","p1__44246#","cljs.core/every?","norns-index.views/audio-feature->icon-maybe","p1__44249#","norns-index.views/grid-feature->icon-maybe","norns_index.views.simple_feature__GT_icon","p1__44250#","p1__44251#","p1__44252#","p2__44253#","p1__44254#","p2__44255#","p1__44256#","p2__44257#","p1__44258#","p2__44259#","cljs.core/reverse","norns-index.utils.core/remove-nils"],"sourcesContent":["(ns norns-index.views\n  (:require\n   [norns-index.utils.core :refer [member? remove-nils]]\n\n   [norns-index.state :refer [state show-script?]]\n   [norns-index.conf :as conf]))\n\n\n(declare\n norns-script-features->icons\n ;; sub-views\n filter-panel\n filter-section-io-feature\n script-panel screenshot feature\n script-category-section)\n\n\n\f\n;; VIEW: MAIN\n\n(defn main-view []\n  [:div.main-view\n   ;; [filter-panel]\n   (doall\n    (map script-category-section conf/script-categories-order))])\n\n\n\f\n;; VIEW: FILTER PANEL\n\n(defn filter-panel []\n  [:div.script-category-section\n   [:h2 \"Filter\"]\n   [:label.block\n    [:span \"Name\"]\n    [:input\n     {:type \"text\"\n      :style {:margin-left \"0.5em\"}\n      :on-change (fn [e]\n                   (swap! state assoc-in [:filter :txt] e.target.value))}]]\n   [:div\n    (doall\n     (map\n      filter-section-io-feature\n      conf/ordered-filterable-io-features))]])\n\n(defn filter-section-io-feature [feature]\n  (let [feature-def (get conf/io-features feature)\n\n        feature-std-vals (:values feature-def)\n        feature-catch-all-val (:catch-all-value feature-def)\n        feature-all-default-vals (if feature-catch-all-val\n                                   (conj feature-std-vals feature-catch-all-val)\n                                   feature-std-vals)\n\n        is-requirable (:is-required feature-def)\n\n        on-change-visibility-fn (fn [e]\n                                  (swap! state assoc-in [:filter :io feature :display] (keyword e.target.value)))\n        on-change-value-fn (fn [e]\n                             (.stopPropagation e)\n                             (if e.target.checked\n                               (swap! state update-in [:filter :io feature :values] conj (keyword e.target.value))\n                               (swap! state update-in [:filter :io feature :values] disj (keyword e.target.value))))]\n    ^{:key (str \"filter-section-io-\" (name feature))}\n    [:div\n     [:table\n      [:thead\n       [:tr\n        [:th {:colSpan 3}\n         (name feature)]]]\n      [:tbody\n       ;; REVIEW: filter in/out/only, or only/exclude\n       [:tr\n        [:td\n         {:colSpan 3}\n         [:div.switch-toggle.switch-3.switch-candy\n\n          [:input.switch-filter-out\n           {:type \"radio\"\n            :id (str \"radio-\" (name feature) \"-no\")\n            :name (str \"radio-\" (name feature))\n            :value \"no\"\n            :style {:margin-left \"0.5em\"}\n            :on-change on-change-visibility-fn\n            :checked (= :no (get-in @state [:filter :io feature :display]))\n            }]\n          [:label.noselect\n           {:for (str \"radio-\" (name feature) \"-no\")}\n           \"without\"]\n\n          [:input.switch-neutral\n           {:type \"radio\"\n            :id (str \"radio-\" (name feature) \"-optional\")\n            :name (str \"radio-\" (name feature))\n            :value \"optional\"\n            :style {:margin-left \"0.5em\"}\n            :on-change on-change-visibility-fn\n            :checked (= :optional (get-in @state [:filter :io feature :display]))\n            }]\n          [:label.noselect\n           {:for (str \"radio-\" (name feature) \"-optional\")}\n           \"n/a\"]\n\n          [:input.switch-filter-in\n           {:type \"radio\"\n            :id (str \"radio-\" (name feature) \"-only\")\n            :name (str \"radio-\" (name feature))\n            :value \"only\"\n            :style {:margin-left \"0.5em\"}\n            :on-change on-change-visibility-fn\n            :checked (= :only (get-in @state [:filter :io feature :display]))\n            }]\n          [:label.noselect\n           {:for (str \"radio-\" (name feature) \"-only\")}\n           \"only\"]\n\n          (when is-requirable\n            [:span\n             [:input.switch-filter-in-required\n              {:type \"radio\"\n               :id (str \"radio-\" (name feature) \"-required\")\n               :name (str \"radio-\" (name feature))\n               :value \"required\"\n               :style {:margin-left \"0.5em\"}\n               :on-change on-change-visibility-fn\n               :checked (= :required (get-in @state [:filter :io feature :display]))\n               }]\n             [:label.noselect\n              {:for (str \"radio-\" (name feature) \"-required\")}\n              \"only-required\"]])\n\n          ]]]\n       [:tr\n        (when (> (count feature-all-default-vals) 1)\n          (doall\n           (map\n            (fn [feature-v]\n              (let [label (clojure.string/replace-first (name feature-v) (str (name feature) \"_\") \"\")]\n                ^{:key (str \"filter-block-\" (name feature-v))}\n                [:td [:label.block\n                      [:input\n                       {:type \"checkbox\"\n                        :name (str \"checkbox-\" (name feature) \"-value\")\n                        :value (name feature-v)\n                        :style {:margin-left \"0.5em\"}\n                        :on-change on-change-value-fn\n                        :defaultChecked true}]\n                      [:span\n                       {:style {:margin-left \"0.5em\"}}\n                       label]]]))\n            feature-all-default-vals)))]]]]))\n\n\n\f\n;; VIEW: SCRIPT CATEGORY\n\n(defn script-category-section [script-category]\n  (when-let [matched-scripts (-> (filter (fn [[script-name script-props]]\n                                           (and\n                                            (member? script-category (:types script-props))\n                                            (show-script? script-name)\n                                            )) (:script-list @state))\n                                 keys\n                                 sort\n                                 seq)]\n    ^{:key (str script-category)}\n    [:div.script-category-section\n     [:h2 (get conf/script-categories script-category)]\n     [:div.flex.flex-wrap.script-panels-container\n      (doall\n       (map #(script-panel script-category %) matched-scripts))]]))\n\n\n\f\n;; VIEWS: SCRIPT PANEL\n\n(defn script-panel [script-category script-name]\n  (let [url (str \"https://norns.community/\" (get-in @state [:script-list script-name :path]))\n        description (get-in @state [:script-list script-name :description])\n        features (get-in @state [:script-list script-name :features])\n        required-features (get-in @state [:script-list script-name :required-features])\n        feature-icons (norns-script-features->icons features required-features)]\n    ^{:key (str script-category \".\" script-name)}\n    [:div.script-panel-container\n     ;; {:style {:display (if (show-script? script-name) \"block\" \"none\")}} ;NB: this might be an optim, less diffs between React & actual DOM\n     [:div.script-panel\n      {:on-click (fn [e]\n                   (set! (.. js/window -top -location -href) url))}\n      [screenshot script-name]\n      [:div\n       [:p.script-title (clojure.string/upper-case script-name)]\n       [:p.script-description description]\n       [:div.flex.flex-wrap\n        (doall\n         (map #(feature % script-category script-name) feature-icons))]\n       ]]]))\n\n(defn screenshot [script-name]\n  (let [author (get-in @state [:script-list script-name :author])]\n    [:div.norns-screenshot-container\n     ;; [:img.img-norns-screenshot {:src (str \"img/screenshot/\" script-name \".png\")}]\n     [:img.img-norns-screenshot {:alt \" \" :src (str \"https://norns.community/community/\" author \"/\" script-name \".png\")}]\n     ]))\n\n(defn feature [feature-name & [script-category script-name]]\n  ^{:key (str script-category \".\" script-name \".\" feature-name)}\n  [:div.norns-feature-container\n   [:img.img-norns-feature {:src (str \"img/feature/\" feature-name \".svg\")}]])\n\n\n\f\n;; HELPERS - I/O FEATURES ICONS\n\n(defn simple-feature->icon [feature & [is-required]]\n  (str\n   (get\n    {:midi_in \"midi_i\"\n     :midi_out \"midi_o\"\n     :audio_in \"audio_i\"\n     :audio_out \"audio_o\"\n     :grid_128 \"grid_128\"\n     :grid_any \"grid_any\"\n     :kbd \"kbd\"\n     :mouse \"mouse\"\n     :arc \"arc\"\n     :crow \"crow\"}\n    feature)\n   (when is-required \"!!\"))\n  )\n\n(defn simple-feature->icon-maybe [search features required-features]\n  (when (member? search features)\n    (simple-feature->icon search)))\n\n(defn midi-feature->icon-maybe [features required-features]\n  (cond\n    (every? #(member? % features) #{:midi_in :midi_out})\n    \"midi_io\"\n\n    (member? :midi_in features)\n    (simple-feature->icon :midi_in)\n\n    (member? :midi_out features)\n    (simple-feature->icon :midi_out)\n\n    ;; NB: unspecified fallback is current implem\n    (member? :midi features)\n    (simple-feature->icon \"midi\")))\n\n(defn audio-feature->icon-maybe [features required-features]\n  (cond\n    (every? #(member? % features) #{:audio_in :audio_out})\n    \"audio_io\"\n\n    (member? :audio_in features)\n    (simple-feature->icon :audio_in)\n\n    (member? :audio_out features)\n    (simple-feature->icon :audio_out)\n\n    ;; NB: unspecified fallback is current implem\n    (member? :audio features)\n    (simple-feature->icon \"audio\")))\n\n(defn grid-feature->icon-maybe [features required-features]\n  (let [is-required (when required-features\n                      (member? :grid required-features))]\n    (cond\n      (member? :grid_any features)\n      (simple-feature->icon :grid_any is-required)\n\n      (every? #(member? % features) #{:grid_64 :grid_128})\n      (str \"grid_64-128\" (when is-required \"!!\"))\n\n      (member? :grid_128 features)\n      (simple-feature->icon :grid_128 is-required)\n\n      ;; NB: unspecified fallback is current implem\n      (member? :grid features)\n      (simple-feature->icon \"audio\"))))\n\n(defn norns-script-features->icons [features required-features]\n  (->\n   (map #(% features required-features)\n        (reverse\n         [grid-feature->icon-maybe\n          #(simple-feature->icon-maybe :arc %1 %2)\n          #(simple-feature->icon-maybe :crow %1 %2)\n          #(simple-feature->icon-maybe :kbd %1 %2)\n          #(simple-feature->icon-maybe :mouse %1 %2)\n          midi-feature->icon-maybe\n          audio-feature->icon-maybe]))\n   remove-nils))\n"]}