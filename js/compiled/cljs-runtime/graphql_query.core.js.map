{"version":3,"sources":["graphql_query/core.cljc"],"mappings":"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","names":["graphql-query.core/*kw->gql-name*","cljs.core/name","graphql-query.core/kw-arg->str","kw","graphql-query$core$ArgumentFormatter$arg__GT_str$dyn","x__4428__auto__","m__4429__auto__","graphql-query.core/arg->str","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","graphql-query.core/ArgumentFormatter","arg","graphql-query.core/arguments->str","args","iter__4529__auto__","s__42954","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__42957","cljs.core/chunk-buffer","i__42956","vec__42966","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__42953","cljs.core/chunk-rest","vec__42977","cljs.core/first","cljs.core/cons","cljs.core/rest","k","v","cljs.core.interpose","cljs.core/flatten","cljs.core.apply","cljs.core/str","graphql-query.core/escape-chars","s","clojure.string/escape","graphql-query.core/sequential->str","cljs.core.map","goog.object/set","cljs.core/PROTOCOL_SENTINEL","cljs.core/PersistentArrayMap","cljs.core/PersistentHashMap","cljs.core/PersistentVector","cljs.core/IndexedSeq","cljs.core/List","cljs.core/Keyword","js/goog.date.Date","js/goog.date.DateTime","js/goog.date.UtcDateTime","graphql-query.core/meta-field->str","meta-field","graphql-query.core/fields->str","fields","s__43073","b__43075","i__43074","vec__43085","iter__43072","vec__43129","type","value","pred__43089","expr__43090","js/Error","pred__43133","expr__43134","cljs.core/=","alias","G__43107","G__43140","G__43112","G__43147","clojure.string.join","p1__43062#","p1__43064#","graphql-query.core/variables->str","variables","s__43154","b__43156","i__43155","map__43159","cljs.core/hash-map","cljs.core.get","iter__43153","map__43162","var-name","var-type","var-default","graphql-query.core/fragment->str","fragment","graphql-query.core/include-fields?","cljs.core/empty?","js/graphql-query","js/graphql-query.core","js/graphql-query.core.->query-str","method-table__4619__auto__","cljs.core.atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","fexpr__43172","cljs.core/MultiFn","cljs.core.symbol","graphql-query.core/->query-str","query","cljs.core/vector?","p__43174","vec__43177","_","p__43180","vec__43181","operation","operation-with-name","variables-str","fragments","fragments-str","query-def","query-str","p__43196","vec__43197","p__43202","vec__43203","p__43211","vec__43215","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","graphql-query.core/graphql-query","p__43242","vec__43243","map__43246","kw->gql-name","seq43238","G__43239","cljs.core/next","self__4723__auto__","data","*kw->gql-name*-orig-val__43249","*kw->gql-name*-temp-val__43250","or__4126__auto__","graphql-query.spec/query->spec","cljs.core/chunk-first"],"sourcesContent":["(ns graphql-query.core\n  (:require [graphql-query.spec :as spec]\n            [clojure.string :as str])\n  #?(:clj (:import (clojure.lang IPersistentMap Keyword IPersistentCollection))\n     :cljs (:import goog.date.Date goog.date.DateTime goog.date.UtcDateTime)))\n\n(def ^:dynamic *kw->gql-name* name)\n\n(defn kw-arg->str [kw]\n  (*kw->gql-name* kw))\n\n(defprotocol ArgumentFormatter\n  \"Protocol responsible for query arguments' formatting to string.\n  Has separate implementations for general data types in cljs and clj.\"\n  (arg->str [arg]))\n\n(defn arguments->str\n  \"Given a map of query arguments, formats them and concatenates to string.\n\n  E.g. (arguments->str {:id 1 :type \\\"human\\\"}) => id:1,type:\\\"human\\\"\"\n  [args]\n  (->> (for [[k v] args]\n         [(*kw->gql-name* k) \":\" (arg->str v)])\n    (interpose \",\")\n    flatten\n    (apply str)))\n\n(defn escape-chars [s]\n  (clojure.string/escape s {\\\" \"\\\\\\\"\"}))\n\n(defn sequential->str\n  \"Given something that is sequential format it to be like a JSON array.\"\n  [arg]\n  (str \"[\" (apply str (interpose \",\" (map arg->str arg))) \"]\"))\n\n#?(:clj (extend-protocol ArgumentFormatter\n          nil\n          (arg->str [arg] \"null\")\n          String\n          (arg->str [arg] (str \"\\\"\" (escape-chars arg) \"\\\"\"))\n          IPersistentMap\n          (arg->str [arg] (str \"{\" (arguments->str arg) \"}\"))\n          IPersistentCollection\n          (arg->str [arg] (str \"[\" (apply str (interpose \",\" (map arg->str arg))) \"]\"))\n          Keyword\n          (arg->str [arg] (kw-arg->str arg))\n          Object\n          (arg->str [arg] (str arg))))\n\n#?(:cljs (extend-protocol ArgumentFormatter\n           nil\n           (arg->str [arg] \"null\")\n           string\n           (arg->str [arg] (str \"\\\"\" (escape-chars arg) \"\\\"\"))\n           PersistentArrayMap\n           (arg->str [arg] (str \"{\" (arguments->str arg) \"}\"))\n           PersistentHashMap\n           (arg->str [arg] (str \"{\" (arguments->str arg) \"}\"))\n           PersistentVector\n           (arg->str [arg] (sequential->str arg))\n           IndexedSeq\n           (arg->str [arg] (sequential->str arg))\n           LazySeq\n           (arg->str [arg] (sequential->str arg))\n           List\n           (arg->str [arg] (sequential->str arg))\n           Keyword\n           (arg->str [arg] (kw-arg->str arg))\n           number\n           (arg->str [arg] (str arg))\n           object\n           (arg->str [arg] (str arg))\n           boolean\n           (arg->str [arg] (str arg))\n           goog.date.Date\n           (arg->str [arg] (.getTime arg))\n           goog.date.DateTime\n           (arg->str [arg] (.getTime arg))\n           goog.date.UtcDateTime\n           (arg->str [arg] (.getTime arg))))\n\n(defn meta-field->str\n  \"Converts namespaced meta field keyword to graphql format, e.g :meta/typename -> __typename\"\n  [meta-field]\n  (str \"__\" (name meta-field)))\n\n(defn fields->str\n  \"Given a spec conformed vector of query fields (and possibly nested fields),\n  concatenates them to string, keeping nested structures intact.\"\n  [fields]\n  (if (keyword? fields)\n    (str \"...\" (*kw->gql-name* (name fields)))\n    (->> (for [[type value] fields]\n           (condp = type\n             :graphql-query/meta-field (meta-field->str value)\n             :graphql-query/field (*kw->gql-name* value)\n             :graphql-query/field-with-args (str (*kw->gql-name* (:graphql-query/field value))\n                                                 (when (:args value)\n                                                   (str \"(\" (arguments->str (:args value)) \")\")))\n             :graphql-query/field-with-data (str (when-let [alias (*kw->gql-name* (:field/alias value))]\n                                                   (str alias \":\"))\n                                                 (fields->str (:field/data value)))\n             :graphql-query/nested-field (str (*kw->gql-name* (:graphql-query/nested-field-root value))\n                                              (when (:args value)\n                                                (str \"(\" (arguments->str (:args value)) \")\"))\n                                              \"{\"\n                                              (fields->str (:graphql-query/nested-field-children value))\n                                              \"}\")\n             :graphql-query/nested-field-arg-only (str (*kw->gql-name* (:graphql-query/nested-field-root value))\n                                                       (str \"(\" (arguments->str (:args value)) \")\"))\n             :fragments (str/join \" \" (map #(str \"...\" (*kw->gql-name* (name %))) value))\n             :graphql-query/nested-field-with-fragments (str (*kw->gql-name* (:graphql-query/nested-field-root value))\n                                                             \"{\"\n                                                             (str/join \" \" (map #(str \"...\" (*kw->gql-name* (name %)))\n                                                                                (:fragments value)))\n                                                             \"}\")))\n      (interpose \",\")\n      (apply str))))\n\n(defn variables->str\n  \"Given a vector of variable maps, formats them and concatenates to string.\n\n  E.g. (variables->str [{:variable/name \\\"id\\\" :variable/type :Int}]) => \\\"$id: Int\\\"\"\n  [variables]\n  (->> (for [{var-name :variable/name var-type :variable/type var-default :variable/default} variables]\n         (str (name var-name) \":\" (*kw->gql-name* var-type) (when var-default (str \"=\" (arg->str var-default)))))\n    (interpose \",\")\n    (apply str)))\n\n(defn fragment->str\n  \"Given a fragment map, formats it and concatenates to string,\"\n  [fragment]\n  (let [fields (str \"{\" (fields->str (:fragment/fields fragment)) \"}\")]\n    (str \"fragment \"\n         (*kw->gql-name* (name (:fragment/name fragment)))\n         \" on \"\n         (*kw->gql-name* (:fragment/type fragment))\n         fields)))\n\n(defn include-fields?\n  \"Include fields if fields is not empty or is a keyword.\n   fields could be nil or empty for operations that return a scalar.\"\n  [fields]\n  (or (keyword? fields)\n      (not (empty? fields))))\n\n(defmulti ->query-str\n          (fn [query]\n            (cond (vector? query) (first query)\n                  (:graphql-query/query query) :graphql-query/query\n                  (:graphql-query/query-with-data query) :graphql-query/query-with-data\n                  :else :default)))\n\n(defmethod ->query-str :graphql-query/query-vector\n  [[_ query]]\n  \"Given a spec conformed query vector, creates query string with query, arguments and fields.\"\n  (str \"{\"\n       (->> (map ->query-str query)\n         (interpose \",\")\n         (apply str))\n       \"}\"))\n\n(defmethod ->query-str :graphql-query/query-def\n  [[_ query]]\n  \"Given a spec conformed root query map, creates a complete query string.\"\n  (let [operation (:operation query)\n        operation-with-name (when operation (str (*kw->gql-name* (:operation/type operation)) \" \" (*kw->gql-name* (:operation/name operation))))\n        variables (:variables query)\n        variables-str (when variables (str \"(\" (variables->str variables) \")\"))\n        fragments (:fragments query)\n        fragments-str (when fragments (str \" \" (->> (map fragment->str fragments)\n                                                 (interpose \",\")\n                                                 (apply str))))]\n    (str operation-with-name\n         variables-str\n         \"{\"\n         (->> (map ->query-str (:queries query))\n           (interpose \",\")\n           (apply str))\n         \"}\"\n         fragments-str)))\n\n(defmethod ->query-str :graphql-query/query\n  [query]\n  \"Processes a single query.\"\n  (let [query-def (:graphql-query/query query)\n        alias (when (:query/alias query) (str (*kw->gql-name* (:query/alias query)) \":\"))\n        query-str (*kw->gql-name* (:query query-def))\n        args (when (:args query-def) (str \"(\" (arguments->str (:args query-def)) \")\"))\n        fields (str \"{\" (fields->str (:fields query-def)) \"}\")]\n    (str alias query-str args fields)))\n\n(defmethod ->query-str :queries\n  [[_ query]]\n  (str \"{\"\n       (->> (map ->query-str query)\n         (interpose \",\")\n         (apply str))\n       \"}\"))\n\n(defmethod ->query-str :graphql-query/query-with-data\n  [[_ query]]\n  (let [query-str (->query-str (:query/data query))\n        alias (when (:query/alias query) (str (*kw->gql-name* (:query/alias query)) \":\"))]\n    (str alias query-str)))\n\n(defmethod ->query-str :query/data\n  [[_ query]]\n  \"Processes simple query.\"\n  (let [query-str (*kw->gql-name* (:query query))\n        args (when (:args query) (str \"(\" (arguments->str (:args query)) \")\"))\n        fields (when (include-fields? (:fields query)) (str \"{\" (fields->str (:fields query)) \"}\"))]\n    (str query-str args fields)))\n\n(defmethod ->query-str :default\n  [query]\n  \"Processes a query map (with query name, args and fields)\"\n  (let [query-str (*kw->gql-name* (:query query))\n        args (when (:args query) (str \"(\" (arguments->str (:args query)) \")\"))\n        fields (when (include-fields? (:fields query)) (str \"{\" (fields->str (:fields query)) \"}\"))]\n    (str query-str args fields)))\n\n(defn graphql-query\n  \"Formats clojure data structure to valid graphql query string.\"\n  [data & [{:keys [:kw->gql-name]}]]\n  (binding [*kw->gql-name* (or kw->gql-name *kw->gql-name*)]\n    (-> (spec/query->spec data)\n        ->query-str)))\n"]}