{"version":3,"sources":["norns_index/dynamic_conf.cljs"],"mappings":";AAaA,AAAA;AAAA,AAOA,AAAA,AAAMA;AAAN,AACE,AAAAC,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAAA,AAAAC,AAAAH,AAAAC;AAAAG,AAAA,AAAA,AAAAF;AAAAG,AAAA,AAAAF,AAAAJ,AAAAK;AAAAE,AAAA,AAAA,AAAAD,AAGsBsC;AAHtB9C,AAAAA;AAAA,AAAA,AAAAU,AAAAV,AAAA,AAAAS;;AAAA,AAAA,AAAAR,AAAA;AAAA,AAAAU,AAAA,AAAAX,AAAA;AAAAW,AAAA,AAAAX,AAAA;AAAAY,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA,AAAAD,AAOSmC;AAPT/C,AAAA,AAAAc,AAAAd;AAAA,AAAA,AAAAc,AAAA,AAAAH;;AAAAG;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAAf;AAAA,AAAA,AAAAe,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAhB;AAAA,AAAA,AAAAgB,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAf,AAAA;AAAA,AAAAgB,AAAA,AAAA,AAQO+B;AARPhD,AAAAA;AAAA,AAAA,AAAA,AAAAkB,AAAAlB;AAAA,AAAA,AAAAkB,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAjB,AAAA;AAAA,AAAAU,AAAA,AAAAX,AAAA;AAAAmB,AAAA,AAAAb;AAAAc,AAAA,AAAAC;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAAD,AAAAE,AAAA;AAAAE,AAAA,AAAAb,AAAAY,AASY0B;AATZxB,AAAA,AAAAD,AAUY0B,AAAKC;AAVjBzB,AAAA,AAAAP,AAAAM,AAWY2B;AAXZzB,AAAA,AAAAD,AAAAA,AAYW2B,AAAAA,AAAAA;AAZXzB,AAAA,AAAA,AAAAD,AAaY2B,AAAMC,AAAMC;AAbxBxD,AAAAA;AAAA,AAAA,AAAA,AAAA6B,AAAA7B;AAAA,AAAA,AAAA6B,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAA5B,AAAA;AAAA,AAAA6B,AAAA,AAAA9B,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA+B,AAAA/B,AAAA8B;;AAAA;;;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC;;AAAA,AAAAD,AAAA,AAAA;;AAAAA;;AAAAhC;;AAAA,AAAA,AAAAkC,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAApC,AAAAC;AAAA,AAAA,AAAA,AAAAoC,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAA,AAAAE,AAAAC;AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAAG,AAAAxC;AAAA,AAAA,AAAAwC,AAAA,AAAAD;;AAAAC;AAAA,AAAAC,AAAAzC;;AAAA;;AAAA,AAAA,AAAAqC;;;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAlC;;;;AAAAkC;;;;;AAAAlC;;;;;AAAAA;;;;;;;;;AAAA0C,AAAA,AAAAC,AAAA,AAAA7C;AAAA,AAAA,AAAA6C,AAAAC,AAAA,AAAAjD;;AAAAgD;;AAAA,AAAA,AAAAE,AAAAH;;;AAAA/C;;AAeF,AAAA,AAAMwD,AAAkBM;AAAxB,AACE,AAAAC,AAAuB,AAAA,AAAOD;AAA9B,AAAA,AAAAC;AAAA,AAAAA,AAAkBG;AAAlB,AAAA,AAAAH,AAC0B,AAAA,AAACK,AAAiCF;AAD5D,AAAA,AAAAH;AAAA,AAAAA,AACkBI;AADlB,AAAA,AAAAJ,AAEyCI;AAFzC,AAAA,AAAAJ;AAAA,AAAAC,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAEmBK;AAFnB,AAAAJ,AAAAD,AAAA,AAAA,AAEqBM;AAFrB,AAAAL,AAAAD,AAAA,AAAA,AAE4BO;AAF5B,AAAA,AAAA,AAGGA,AAAY,AAAA,AAAA,AAACd,AAAKK,AAAcQ;;AAHnC;;;AAAA;;;AAAA;;;AASF,AAAA,AAAME,AAAqCC;AAA3C,AACE,AACE,AAAA,AAAAC,AAACC;AAAD,AAAO,AAAAD,AAACE,AAAUH;AAAlB,AAAA,AAAA;AADF,AAAA;;AAAA,AAKE,AAAA,AAAChB,AAEA,AAAA,AAAAoB,AAACC;AAAD,AAAS,AAAAD,AAACD,AAAUG;AAA8BN;;;;AAEvD,AAAA,AAAMO,AAAsCP;AAA5C,AACE,AAAMQ,AAAQ,AAAA,AAAAC,AAACC;AAAD,AAAM,AACI,AAAAD,AAAA,AAAA,AAACE,AACDC;AAASZ;AAC3Ba,AAAY,AAACC;AAHnB,AAIE,AAACC,AACA,AAACV,AAAOQ,AAAYL;;AAEzB,AAAA,AAAMQ,AAA+ChB;AAArD,AACE,AAACe,AACA,AAAA,AAAAE,AAACnC;AAAD,AACE,AAAAQ,AAAoB,AAAA2B,AAAA,AAACC;AAArB,AAAA,AAAA5B;AAAA,AAAAA,AAAkBM;AAAlB,AAAA,AAAAN,AACqB,AAACsB,AAAQ,AAAAK,AAAA,AAAA,AAACN;AAD/B,AAAA,AAAArB;AAAA,AAAAA,AACkB6B;AADlB,AAAA,AAAA7B,AAEoB,AAACa,AAAQgB,AAAGC;AAFhC,AAAA,AAAA9B;AAAA,AAAAA,AAEkBM;AAFlB,AAAA,AAGEuB;;AAHF;;;AAAA;;;AAAA;;AAIDnB;;AAEJ,AAAA,AAAMqB,AAA8BC;AAApC,AACE,AAAMC,AAAY,AAAA,AAAcD;AAC1BtB,AAAK,AAAA,AAAOsB;AACZE,AAAW,AAACzB,AAAoCC;AAChDyB,AAAY,AAAClB,AAAqCP;AAClD0B,AAAqB,AAACV,AAA8ChB;AAJ1E,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAKUwB,AACMD,AACHE,AACSC,AACX,AAAA,AAASJ,AACX,AAAA,AAAOA;;AAElB,AAAA,AAAMrC,AAAsB0C;AAA5B,AACE,AAACC,AACAC,AACA,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAtC,AAAAuC,AAAA,AAAA,AAAMC;AAAN,AAAAxC,AAAAuC,AAAA,AAAA,AAAWT;AAAX,AAAA,AACGU,AAAK,AAACX,AAA6BC;AACtCK","names":["norns-index.dynamic-conf/get-from-wiki-js","c__41933__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__41934__auto__","switch__41814__auto__","state_44202","state_val_44203","inst_44176","inst_44177","inst_44178","inst_44179","cljs.core/PersistentHashMap","inst_44180","inst_44181","inst_44182","cljs.core.async.impl.ioc-helpers/take!","inst_44184","inst_44185","inst_44186","statearr-44204","statearr-44205","statearr-44206","inst_44188","statearr-44207","inst_44190","inst_44191","cljs.core/PersistentVector","inst_44192","inst_44193","inst_44194","inst_44195","inst_44196","inst_44197","inst_44198","statearr-44208","inst_44200","cljs.core.async.impl.ioc-helpers/return-chan","statearr-44209","state-machine__41815__auto__","ret-value__41816__auto__","result__41817__auto__","cljs.core/keyword-identical?","e44211","js/Object","ex__41818__auto__","statearr-44216","cljs.core.async.impl.ioc-helpers/process-exception","state__41935__auto__","statearr-44218","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs_http.client.get","cljs.core.not_EQ_","js/console.error","cljs.core.get_in","cljs.core.keep","norns-index.dynamic-conf/keep-script-page","cljs.core.into","norns-index.dynamic-conf/page-map->script-map","cljs.core.swap_BANG_","norns-index.state/state","cljs.core/assoc","page","b2__42388__auto__","vec__44219","cljs.core.nth","path","matches","cljs.core/re-matches","_","author","script-name","norns-index.dynamic-conf/script-categories-from-wiki-js-tags","tags","p1__44222#","cljs.core/some","norns-index.utils.core/member?","p1__44223#","cljs.core.filter","norns-index.conf/script-categories-order","norns-index.dynamic-conf/script-io-features-from-wiki-js-tags","kw-tags","p1__44224#","cljs.core.map","clojure.string/replace","cljs.core.keyword","feature-kws","norns-index.conf/flattended-io-features","cljs.core/set","norns-index.dynamic-conf/script-required-io-features-from-wiki-js-tags","p1__44225#","clojure.string/ends-with?","kw","norns-index.conf/ordered-filterable-io-features","norns-index.dynamic-conf/wiki-js-page-def->script-def","page-def","description","categories","io-features","required-io-features","page-map","norns_index.utils.core.maintain","cljs.core/map","p__44232","vec__44233","name"],"sourcesContent":["(ns norns-index.dynamic-conf\n  (:require-macros\n   [cljs.core.async.macros :as asyncm :refer (go go-loop)])\n  (:require\n   [taoensso.encore :as encore]\n   [norns-index.utils.core :refer [member? maintain]]\n   [cljs.core.async :as async :refer (<! >! put! chan)]\n   [cljs-http.client :as http]\n\n   [norns-index.state :refer [state]]\n   [norns-index.conf :as conf]))\n\n\n(declare keep-script-page\n         page-map->script-map)\n\n\n\f\n;; WIKI.JS API\n\n(defn get-from-wiki-js []\n  (go\n    (let [url \"https://norns.community/graphql\"\n          q \"{pages { list { path, tags, description } } }\"\n          response (<! (http/get url\n                                 {:with-credentials? false\n                                  ;; :headers {\"Authorization\" (str \"Bearer \" bearer-token)}\n                                  :query-params {\"query\" q}}))]\n      (if (not= 200 (:status response))\n        (js/console.error \"failed to retrieve data\")\n        (->> (get-in response [:body :data :pages :list])\n             (keep keep-script-page)\n             (into {})\n             page-map->script-map\n             (swap! state assoc :script-list))))))\n\n(defn keep-script-page [page]\n  (encore/when-let [path (:path page)\n                    matches (re-matches #\"^authors/(.*)/(.*)\" path)\n                    [_ author script-name] matches]\n    [script-name (into page {:author author})]))\n\n\n\f\n;; META-DATA NORMALISATION\n\n(defn script-categories-from-wiki-js-tags [tags]\n  (cond\n    (some #(member? % tags) [\"looper\" \"live sampler\"])\n    [\"loopers + live samplers\"]\n\n    :default\n    (into\n     []\n     (filter #(member? % conf/script-categories-order) tags))))\n\n(defn script-io-features-from-wiki-js-tags [tags]\n  (let [kw-tags (map #(-> %\n                          (clojure.string/replace #\" \" \"_\")\n                          keyword) tags)\n        feature-kws (conf/flattended-io-features)]\n    (set\n     (filter feature-kws kw-tags))))\n\n(defn script-required-io-features-from-wiki-js-tags [tags]\n  (set\n   (keep\n    #(encore/when-let [_ (clojure.string/ends-with? % \" required\")\n                       kw (keyword (clojure.string/replace % #\" required\" \"\"))\n                       _ (member? kw conf/ordered-filterable-io-features)]\n       kw)\n    tags)))\n\n(defn wiki-js-page-def->script-def [page-def]\n  (let [description (:description page-def)\n        tags (:tags page-def)\n        categories (script-categories-from-wiki-js-tags tags)\n        io-features (script-io-features-from-wiki-js-tags tags)\n        required-io-features (script-required-io-features-from-wiki-js-tags tags)]\n    {:types categories\n     :description description\n     :features io-features\n     :required-features required-io-features\n     :author (:author page-def)\n     :path (:path page-def)}))\n\n(defn page-map->script-map [page-map]\n  (maintain\n   map\n   (fn [[name page-def]]\n     [name (wiki-js-page-def->script-def page-def)])\n   page-map))\n"]}