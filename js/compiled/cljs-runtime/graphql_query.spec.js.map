{"version":3,"sources":["graphql_query/spec.cljc"],"mappings":"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","names":["graphql-query.spec/namespaced-fragment-kw?","x","cljs.core/Keyword","cljs.core._EQ_","cljs.core/namespace","graphql-query.spec/fragment-keyword?","graphql-query.spec/or-conformer","spec","cljs.core/second","cljs.spec.alpha/conform","graphql-query.spec/extract-fragments-name","query","fields","or__4126__auto__","cljs.core.get_in","cljs.core/name","graphql-query.spec/resolve-used-fragments","p1__42385#","cljs.core.map","cljs.core.remove","cljs.core/nil?","cljs.core/set","graphql-query.spec/valid-fragments","cljs.core/not","used-fragments","cljs.core/empty?","graphql-query.exception/throw-ex","fragment-names","cljs.core.comp","undefined-fragments","clojure.set.difference","graphql-query.spec/extract-variables","args","cljs.core/vals","p1__42387#","cljs.core.filter","clojure.string.index_of","p1__42388#","clojure.string/replace","graphql-query.spec/resolve-used-variables","p1__42389#","cljs.core/flatten","graphql-query.spec/valid-variables","used-variables","variables-names","p1__42390#","undefined-variables","graphql-query.spec/meta-fields","cljs.spec.alpha/def-impl","cljs.core/keyword?","cljs.spec.alpha.spec_impl","p1__42409#","cljs.spec.alpha/or-spec-impl","cljs.spec.alpha.every_impl","G__42422","cljs.core/coll?","G__42423","cljs.spec.alpha/cat-impl","G__42424","cljs.spec.alpha/map-spec-impl","G__42425","cljs.core/map?","cljs.core/contains?","cljs.spec.alpha/maybe-impl","G__42433","G__42442","name","G__42468","G__42484","cljs.core/bounded-count","cljs.spec.alpha/MAX_INT","p1__42494#","G__42497","cljs.core/first","G__42524","G__42572","G__42603","cljs.spec.alpha/and-spec-impl","G__42625","graphql-query.spec/query->spec","conformed","cljs.spec.alpha/explain"],"sourcesContent":["(ns graphql-query.spec\n  (:require #?(:clj [clojure.spec.alpha :as s]\n               :cljs [cljs.spec.alpha :as s])\n                    [graphql-query.exception :as ex]\n                    [clojure.set :as c-set]\n                    [clojure.string :as c-string]))\n\n(defn namespaced-fragment-kw?\n  [x]\n  (and (keyword? x)\n       (= \"fragment\" (namespace x))))\n\n(defn- fragment-keyword?\n  \"Checks if keyword has :fragment namespace\"\n  [x]\n  (if (namespaced-fragment-kw? x)\n    x\n    ::s/invalid))\n\n(defn- or-conformer\n  \"Conforms x and returns only conformed value without value type.\"\n  [x spec]\n  (second (s/conform spec x)))\n\n(defn- extract-fragments-name [query]\n  (let [fields (or (get-in query [:query/data :fields]) (:fields query))]\n    (if (keyword? fields)\n      (name fields)\n      nil)))\n\n(defn- resolve-used-fragments\n  [x]\n  (->> x\n    :queries\n    (map #(-> %\n            second\n            extract-fragments-name))\n    (remove nil?)\n    set))\n\n(defn- valid-fragments\n  \"Checks that all fragments used in queries are actually defined.\"\n  [x]\n  (if-not (:fragments x)\n    (let [used-fragments (resolve-used-fragments x)]\n      (if-not (empty? used-fragments)\n        (ex/throw-ex {:graphql-query/ex-type :graphql-query/invalid-fragments\n                      :graphql-query/ex-data used-fragments})\n        x))\n\n    (let [fragment-names (->> x\n                           :fragments\n                           (map (comp name :fragment/name))\n                           set)\n          used-fragments (resolve-used-fragments x)\n          undefined-fragments (c-set/difference used-fragments fragment-names)]\n      (if (empty? undefined-fragments)\n        x\n        (ex/throw-ex {:graphql-query/ex-type :graphql-query/invalid-fragments\n                      :graphql-query/ex-data undefined-fragments})))))\n\n(defn- extract-variables [query]\n  (let [args (or (get-in query [:query/data :args]) (:args query))]\n    (->> args\n      vals\n      (filter #(and (keyword? %)\n                    (c-string/index-of (name %) \"$\")))\n      (map #(c-string/replace (name %) \"$\" \"\")))))\n\n(defn- resolve-used-variables\n  [x]\n  (->> x\n    :queries\n    (map #(-> %\n            second\n            extract-variables))\n    flatten\n    (remove nil?)\n    set))\n\n(defn- valid-variables\n  \"Checks that all variables used in queries are actually defined.\"\n  [x]\n  (if-not (:variables x)\n    (let [used-variables (resolve-used-variables x)]\n      (if-not (empty? used-variables)\n        (ex/throw-ex {:graphql-query/ex-type :graphql-query/invalid-variables\n                      :graphql-query/ex-data used-variables})\n        x))\n\n    (let [variables-names (->> x\n                            :variables\n                            (map #(c-string/replace (name (:variable/name %)) \"$\" \"\"))\n                            set)\n          used-variables (resolve-used-variables x)\n          undefined-variables (c-set/difference used-variables variables-names)]\n      (if (empty? undefined-variables)\n        x\n        (ex/throw-ex {:graphql-query/ex-type :graphql-query/invalid-variables\n                      :graphql-query/ex-data undefined-variables})))))\n\n(def meta-fields #{:meta/typename})\n\n(s/def :graphql-query/query-name keyword?)\n(s/def :graphql-query/fields\n  (s/conformer\n    #(or-conformer %\n                   (s/or\n                     :fields\n                     (s/coll-of (s/or :graphql-query/meta-field meta-fields\n                                      :fragments (s/coll-of namespaced-fragment-kw?)\n                                      :graphql-query/nested-field-with-fragments (s/cat :graphql-query/nested-field-root keyword?\n                                                                                        :fragments (s/coll-of namespaced-fragment-kw?))\n                                      :graphql-query/field keyword?\n\n                                      :graphql-query/field-with-args (s/cat :graphql-query/field keyword?\n                                                                            :args :graphql-query/args)\n\n                                      :graphql-query/field-with-data (s/keys :req [:field/data]\n                                                                             :opt [:field/alias])\n\n                                      :graphql-query/nested-field-arg-only (s/cat :graphql-query/nested-field-root keyword?\n                                                                                  :args :graphql-query/args)\n                                      :graphql-query/nested-field (s/cat :graphql-query/nested-field-root keyword?\n                                                                         :args (s/? :graphql-query/args)\n                                                                         :graphql-query/nested-field-children :graphql-query/fields)))\n\n                     :fragment fragment-keyword?))))\n\n(s/def :graphql-query/args (s/keys :opt []))\n(s/def :query/data (s/cat :query :graphql-query/query-name :args (s/? :graphql-query/args) :fields (s/? :graphql-query/fields)))\n(s/def :graphql-query/query (s/or :query/data :query/data\n                                  :graphql-query/query-with-data (s/keys :req [:query/data]\n                                                                         :opt [:query/alias])))\n(s/def :query/alias keyword?)\n\n(s/def :field/data :graphql-query/fields)\n(s/def :field/alias :query/alias)\n\n(s/def :fragment/name (fn [name]\n                        (and (keyword? name)\n                             (= (namespace name) \"fragment\"))))\n\n(s/def :fragment/type keyword?)\n(s/def :fragment/fields :graphql-query/fields)\n(s/def :graphql-query/fragment (s/keys :req [:fragment/name :fragment/type :fragment/fields]))\n(s/def :graphql-query/fragments (s/coll-of :graphql-query/fragment :min-count 1))\n\n(s/def :operation/type #{:query :mutation :subscription})\n(s/def :operation/name #(or (string? %) (keyword? %)))\n(s/def :graphql-query/operation (s/keys :req [:operation/type :operation/name]))\n\n(s/def :variable/name (fn [x]\n                        (and (keyword? x)\n                             (= (str (first (name x))) \"$\"))))\n\n(s/def :variable/type keyword?)\n(s/def :query/variable (s/keys :req [:variable/name :variable/type]\n                               :opt [:variable/default]))\n(s/def :graphql-query/variables (s/coll-of :query/variable :min-count 1))\n\n(s/def :graphql-query/queries (s/coll-of :graphql-query/query :min-count 1))\n\n\n(s/def :graphql-query/valid-fragments (s/conformer valid-fragments))\n(s/def :graphql-query/valid-variables (s/conformer valid-variables))\n\n(s/def :graphql-query/query-def (s/and (s/keys :req-un [:graphql-query/queries]\n                                               :opt-un [:graphql-query/fragments\n                                                        :graphql-query/operation\n                                                        :graphql-query/variables])\n                                       :graphql-query/valid-fragments\n                                       :graphql-query/valid-variables))\n\n(defn query->spec [query]\n  (let [conformed (s/conform :graphql-query/query-def query)]\n    (if (= ::s/invalid conformed)\n      (ex/throw-ex {:graphql-query/ex-type :graphql-query/spec-validation\n                    :graphql-query/ex-explain (s/explain :graphql-query/query-def query)})\n      [:graphql-query/query-def conformed])))\n"]}